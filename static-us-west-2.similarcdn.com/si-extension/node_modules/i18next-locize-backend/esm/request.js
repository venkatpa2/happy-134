function _typeof(obj) {
    "@babel/helpers - typeof";
    return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj) {
        return typeof obj;
    } : function(obj) {
        return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    }, _typeof(obj);
}
import * as fetchNode from './getFetch.cjs';
var fetchApi;
if (typeof fetch === 'function') {
    if (typeof global !== 'undefined' && global.fetch) {
        fetchApi = global.fetch;
    } else if (typeof window !== 'undefined' && window.fetch) {
        fetchApi = window.fetch;
    } else {
        fetchApi = fetch;
    }
}
var XmlHttpRequestApi;
if (typeof XMLHttpRequest === 'function' || (typeof XMLHttpRequest === "undefined" ? "undefined" : _typeof(XMLHttpRequest)) === 'object') {
    if (typeof global !== 'undefined' && global.XMLHttpRequest) {
        XmlHttpRequestApi = global.XMLHttpRequest;
    } else if (typeof window !== 'undefined' && window.XMLHttpRequest) {
        XmlHttpRequestApi = window.XMLHttpRequest;
    }
}
var ActiveXObjectApi;
if (typeof ActiveXObject === 'function') {
    if (typeof global !== 'undefined' && global.ActiveXObject) {
        ActiveXObjectApi = global.ActiveXObject;
    } else if (typeof window !== 'undefined' && window.ActiveXObject) {
        ActiveXObjectApi = window.ActiveXObject;
    }
}
if (!fetchApi && fetchNode && !XmlHttpRequestApi && !ActiveXObjectApi) fetchApi = fetchNode.default || fetchNode;
if (typeof fetchApi !== 'function') fetchApi = undefined;
var requestWithFetch = function requestWithFetch(options, url, payload, callback) {
    var headers = {};
    if (options.authorize && options.apiKey) {
        headers.Authorization = options.apiKey;
    }
    if (payload || options.setContentTypeJSON) {
        headers['Content-Type'] = 'application/json';
    }
    fetchApi(url, {
        method: payload ? 'POST' : 'GET',
        body: payload ? JSON.stringify(payload) : undefined,
        headers: headers
    }).then(function(response) {
        var resourceNotExisting = response.headers && response.headers.get('x-cache') === 'Error from cloudfront';
        if (!response.ok) return callback(response.statusText || 'Error', {
            status: response.status,
            resourceNotExisting: resourceNotExisting
        });
        response.text().then(function(data) {
            callback(null, {
                status: response.status,
                data: data,
                resourceNotExisting: resourceNotExisting
            });
        }).catch(callback);
    }).catch(callback);
};
var requestWithXmlHttpRequest = function requestWithXmlHttpRequest(options, url, payload, callback) {
    try {
        var x;
        if (XmlHttpRequestApi) {
            x = new XmlHttpRequestApi();
        } else {
            x = new ActiveXObjectApi('MSXML2.XMLHTTP.3.0');
        }
        x.open(payload ? 'POST' : 'GET', url, 1);
        if (!options.crossDomain) {
            x.setRequestHeader('X-Requested-With', 'XMLHttpRequest');
        }
        if (options.authorize && options.apiKey) {
            x.setRequestHeader('Authorization', options.apiKey);
        }
        if (payload || options.setContentTypeJSON) {
            x.setRequestHeader('Content-Type', 'application/json');
        }
        x.onreadystatechange = function() {
            var resourceNotExisting = x.getResponseHeader('x-cache') === 'Error from cloudfront';
            x.readyState > 3 && callback(x.status >= 400 ? x.statusText : null, {
                status: x.status,
                data: x.responseText,
                resourceNotExisting: resourceNotExisting
            });
        };
        x.send(JSON.stringify(payload));
    } catch (e) {
        console && console.log(e);
    }
};
var request = function request(options, url, payload, callback) {
    if (typeof payload === 'function') {
        callback = payload;
        payload = undefined;
    }
    callback = callback || function() {};
    if (fetchApi) {
        return requestWithFetch(options, url, payload, callback);
    }
    if (typeof XMLHttpRequest === 'function' || (typeof XMLHttpRequest === "undefined" ? "undefined" : _typeof(XMLHttpRequest)) === 'object' || typeof ActiveXObject === 'function') {
        return requestWithXmlHttpRequest(options, url, payload, callback);
    }
    callback(new Error('No fetch and no xhr implementation found!'));
};
export default request;