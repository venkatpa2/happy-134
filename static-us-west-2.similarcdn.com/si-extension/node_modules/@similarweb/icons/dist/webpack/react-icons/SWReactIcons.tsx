import * as React from "react";
import * as PropTypes from "prop-types";
import styled, { StyledComponentBase } from "styled-components";
import { icons as exported } from "icons/icons"; //alias
import { iconNames as exportedIconNames } from "iconNames";
// for legacy purposes
export const icons = exported;
export const iconNames = exportedIconNames;

const getCssStr = (size: string) => `{height: ${size}; width: ${size}};`;

const sizes = {
  xs: "16px",
  sm: "24px",
  md: "32px",
  lg: "40px",
  xl: "48px",
  xxl: "72px",
};

export const sizeCss = ({ size }: { size?: string  }) =>
  size ? getCssStr(sizes[size] ? sizes[size] : size) : null;

export const setFillColor = (color?: string) : string | null =>
    color ? `svg path { fill: ${color};}` : null;

export type IconSize = keyof typeof sizes;
export type IconName = typeof iconNames[number];

export interface SWReactIconProps {
  iconName: IconName;
  className?: string;
  size?: IconSize;
  onclick?: () => void;
  iconColor?: string;
  hoverIconColor?: string;
  activeIconColor?: string;
}

const SWReactIconsInner = (props: SWReactIconProps) => {
  const { iconName, className } = props;
  return (
    <div
      className={className}
      data-pdf-icon={"SWReactIcons"}
      data-automation-icon-name={iconName}
      dangerouslySetInnerHTML={{ __html: icons[iconName] }}
    />
  );
};

export const SWReactIcons = styled(SWReactIconsInner)<{iconColor?:string; hoverIconColor?: string; activeIconColor?: string}>`
  ${sizeCss}
  ${({iconColor}) => setFillColor(iconColor)}
  &:hover {
    ${({hoverIconColor}) => setFillColor(hoverIconColor)}
  }
  &:active {
    ${({activeIconColor}) => setFillColor(activeIconColor)}
  }
`;

SWReactIcons.propTypes = {
  className: PropTypes.string,
};

SWReactIcons.defaultProps = {
  className: "SWReactIcons",
};

SWReactIcons.displayName = "SWReactIcons";
