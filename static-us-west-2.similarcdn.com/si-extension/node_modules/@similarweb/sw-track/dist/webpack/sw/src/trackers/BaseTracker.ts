import swLog from "@similarweb/sw-log";
import { TrackBuffer } from "../utils/TrackBuffer";
import { ICustomDimensionData, ITrack, TrackingEvent, CustomAttribute, TrackModel, Primitive } from "./ITrack";
import { idFromRandom } from "../utils/idGenerator";

/**
 * Base Tracker Class
 * contains some base implementations
 */
export abstract class BaseTracker implements ITrack {
  // tracker buffer
  private buffer = new TrackBuffer(this.shouldBuffer);

  public trackEvent(category: string | string[], action: string, name: string, value?: number): void {
    if (this.enabled()) {
      const { eventName, trackId, location } = this.toInternalEventConvention(name);
      this.trackEventInternal({
        category,
        action,
        name: eventName,
        trackId,
        location: location?.join("/"),
        value,
      });
    }
  }

  public trackEvent2(trackPayload: TrackModel): void {
    if (this.enabled()) {
      this.trackEventInternal(trackPayload);
    }
  }

  public dispatchTrackEvent(event, action, eventName, customAttributes = {}) {
    if (this.enabled()) {
      this.dispatchTrackEventInternal(event, action, eventName, customAttributes);
    }
  }

  public trackPageView(customDimsData: ICustomDimensionData): void {
    if (this.enabled()) {
      this.trackPageViewInternal(customDimsData);
    }
  }

  public healthCheck(): void {
    if (this.enabled()) {
      this.healthCheckInternal();
    }
  }

  public getBuffer(): TrackBuffer {
    return this.buffer;
  }

  public runCustomAction(action: string, ...args): void {
    const actionName = `${action}Action`;
    if (typeof this[actionName] === "function") {
      (this[actionName] as () => void).apply(this, args);
    } else {
      swLog.error(`Base tracker: missing action '${action}' on tracker`);
    }
  }

  public enabled(): boolean {
    return this.isEnabled();
  }

  protected toInternalEventConvention(name) {
    const [eventName, trackId, ...location] = (name ?? "").split("/");
    return { eventName, trackId, location };
  }

  protected abstract trackEventInternal({ category, action, cid, name, trackId, location, value }: TrackModel): void;

  protected dispatchTrackEventInternal(
    event: TrackingEvent,
    action: string,
    eventName: string,
    customAttributes: Record<CustomAttribute, Primitive>,
  ): void {
    const { eventName: name, trackId, location } = this.toInternalEventConvention(eventName);
    this.trackEventInternal({
      category: event,
      trackId,
      location: location?.join("/"),
      action,
      name,
    });
  }

  protected abstract trackPageViewInternal(customDimsData: ICustomDimensionData): void;

  protected abstract healthCheckInternal(): void;

  protected abstract isEnabled(): boolean;

  protected shouldBuffer(): boolean {
    return false;
  }

  protected generateId(): string {
    return idFromRandom();
  }

  protected propertyAlreadyExistsWarn(key, value) {
    swLog.warn(`custom attributes already exists as a super attribute! attribute:${key} value:${value}`);
  }
}
