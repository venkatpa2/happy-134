import swLog from "@similarweb/sw-log";
import { BaseTracker } from "./BaseTracker";
import { ICustomDimensionData, TrackModel } from "./ITrack";

declare const SW_ENV: { debug: boolean; apiCache: boolean };

/**
 * A Tracker for Google Analytics
 */
export abstract class GoogleTracker extends BaseTracker {
  protected trackPageViewInternal(customDimsData: ICustomDimensionData): void {
    try {
      const ga = this.ga();
      if (ga) {
        ga("send", "pageview", "/" + document.location.hash);
      }
    } catch (e) {
      swLog.serverLogger("Error in google analytics", e, "Debug");
    }
  }

  protected trackEventInternal({ category, action, name, trackId, location, value }: TrackModel): void {
    try {
      const ga = this.ga();
      if (ga) {
        ga("send", "event", category, action, [name, trackId, location].filter((a) => a).join("/"), value);
      }
    } catch (e) {
      swLog.serverLogger("Error in google analytics", e, "Debug");
    }
  }

  protected healthCheckInternal(): void {
    let hasAdBlocker = false;
    // (A) TEST FETCH HEADER REQUEST TO GOOGLE ADSENSE
    const test = new Request("https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js", {
      method: "HEAD",
      mode: "no-cors",
    });

    // (B) FIRE THE REQUEST
    fetch(test)
      .catch(() => {
        hasAdBlocker = true;
      })
      .finally(() => {
        // check GTM:
        if (!SW_ENV.debug && !window["google_tag_manager"]) {
          swLog.serverLogger("GTM not loaded hasAdBlocker: " + hasAdBlocker, null, "Debug");
        }
      });
  }

  /**
   * get the native tracker
   */
  protected abstract ga(): (...params) => void;
}
