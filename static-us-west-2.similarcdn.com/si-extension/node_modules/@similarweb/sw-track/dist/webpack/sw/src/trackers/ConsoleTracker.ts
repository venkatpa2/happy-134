import swLog from "@similarweb/sw-log";
import { CustomAttribute, ICustomDimensionCustomData, Primitive, TrackingEvent } from "..";
import { ITrack, TrackModel } from "./ITrack";

/**
 * a Dummy tracker that only writes to console
 * for debug purposes
 */
export class ConsoleTracker implements ITrack {
  public static LOG_STYLE = "color:blue";

  constructor(private name: string) {}

  public trackEvent(...args): void {
    this.log(`trackEvent(${args.join(",")})`);
  }

  public dispatchTrackEvent(
    event: TrackingEvent,
    action: string,
    eventName: string,
    customAttributes?: Record<CustomAttribute, Primitive>,
  ): void {
    this.log(`trackEvent(${event},${action},${eventName},${JSON.stringify(customAttributes)})`);
  }

  public trackEvent2(trackPayload: TrackModel): void {
    this.log(`trackEvent2(${JSON.stringify(trackPayload)})`);
  }

  public trackPageView(urlParams: ICustomDimensionCustomData): void {
    this.log(`trackPageView(): ${JSON.stringify(urlParams)}`);
  }

  public healthCheck(): void {
    this.log("healthCheck()");
  }

  public runCustomAction(action: string, ...args): void {
    this.log(`runAction(${action})`, ...args);
  }

  public getBuffer(): null {
    return null;
  }

  private log(...args): void {
    switch (args.length) {
      case 1:
        swLog.info(`%c${this.name}: ${args[0]}`, ConsoleTracker.LOG_STYLE);
        break;
      default:
        swLog.info(`%c${this.name}: ${args[0]}`, ConsoleTracker.LOG_STYLE, ...args.slice(1));
        break;
    }
  }
}
